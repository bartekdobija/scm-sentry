#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This file is part of scm-sentry, check the newest version at:
# https://github.com/bartekdobija/scm-sentry

import os
import subprocess
import logging
import re
import getpass

class GitHandler:
    def __init__(self):
        logging.debug('constructing git handler')

    def handle(self, command):
        subprocess.call(['git-shell', '-c', command])
        return self

class MercurialHandler:
    PATH_EXTRACTOR = re.compile('hg -R (.+) serve --stdio') 

    def __init__(self):
        logging.debug('constructing mercurial handler')

    def handle(self, command):
        # take control over what is passed as a command
        groups = MercurialHandler.PATH_EXTRACTOR.search(command);
        path = groups.group(1)
        if path is None: 
            raise Exception('repository path is incorrect');
        subprocess.call(['hg', '-R', path, 'serve', '--stdio'])
        return self

class SCMSentry:
    def __init__(self, ssh_error_message):
        self._error_message = ssh_error_message

    def _handler(self, cmd):
        if cmd.startswith('git'): return GitHandler()
        if cmd.startswith('hg'): return MercurialHandler()
        raise Exception('scm has not been recognised')

    def handle(self, command):
        logging.debug(command)
        if command is None:
            print self._error_message
            return self
        self._handler(command).handle(command) 
        return self

def main():
    logging.basicConfig(
        filename = '/tmp/scm-sentry-{username}.log'.format(
            username = getpass.getuser()), 
        format = '%(levelname)s:%(asctime)s:%(message)s',
        level = logging.INFO )

    SCMSentry(
        ssh_error_message = 'this account does not provide shell access',
    ).handle(os.environ.get('SSH_ORIGINAL_COMMAND'))

if __name__ == "__main__": main()
